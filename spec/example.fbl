;; This is a comment.
;;

;; Host (Ruby) Interop:

::puts(1)
;; 1
;; => nil

::puts(1 + 2)
;; 3
;; => nil (with 3 printed to stdout)

::"omg".upcase()
;; => OMG

::"lol".upcase.length()
;; => 3

::Array.new()
;; => []

::Array
;; => %host.Array

;; -----

;; Functions:

+ = -> augend, addend { ;; name and parameters
  {binop: true} ;; means it can be invoked as "lhs fn rhs" form

  % augend + addend ;; delegates to the host:
                    ;; target == augend
                    ;; method == +
                    ;; the rest is all parameters
}

sum = -> augend, addend {
  {special: false} ;; map with meta data about the function
  augend + addend ;; evaluation of symbols invoke of + with two params
}

;; recursive function
rember = -> atom list { ;; commas or spaces are "the same"
  return '() { if null?(list) }
  return rest(list) { if eq?(list(first), atom)  }
  cons(list(first), rember(atom, rest(list))
}
